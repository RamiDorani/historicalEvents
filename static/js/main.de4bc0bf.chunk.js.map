{"version":3,"sources":["services/httpService.js","services/eventsService.js","components/EventPreview.jsx","pages/Events.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["BASE_URL","endpoint","data","ajax","a","method","axios","url","res","console","log","dir","response","status","eventsService","query","filterBy","endPoint","month","day","httpService","EventPreview","event","eventType","Card","className","year","Img","variant","src","Body","style","backgroundColor","color","Text","parse","no_year_html","Events","onToggle","useState","events","setEvents","useEffect","isMount","getEvents","dateObj","Date","filterObj","getUTCDate","getUTCMonth","Births","Deaths","onClick","id","map","idx","href","App","document","body","classList","toggle","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.de4bc0bf.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://history.muffinlabs.com/date/'\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing data, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            console.log(':(');\r\n        }\r\n        throw err;\r\n    }\r\n}","import httpService from './httpService';\r\nimport Axios from 'axios';\r\n\r\nexport const eventsService = {\r\n  query,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n  const endPoint = `${filterBy.month}/${filterBy.day}`;\r\n  return httpService.get(endPoint);\r\n}\r\n\r\n","import React,{useEffect,useState} from 'react';\r\nimport parse from 'html-react-parser'\r\nimport { Card, CardGroup, CardImg, Button } from 'react-bootstrap';\r\n\r\nexport function EventPreview({ event,eventType }) {\r\n   \r\n    const eventIng = 'https://qph.fs.quoracdn.net/main-qimg-0d8a610d935f8b61bf2b7711707ded9b';\r\n    const deathImg = 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/The_death.svg/1927px-The_death.svg.png';\r\n    const birthImg = 'https://toppng.com/uploads/preview/cartoon-baby-birth-11548528926gh4vsgnisw.png';\r\n    return (\r\n            <Card className=\"mycard\">\r\n                <span className=\"eventYear\">{event.year}</span>\r\n                <Card.Img variant=\"top\" src={eventType==='event'? eventIng: eventType==='birth' ? birthImg : deathImg}  />\r\n                <Card.Body style={{backgroundColor:\"rgb(48, 48, 48)\", color:\"white\"}}>\r\n                    <Card.Text className=\"myCardTxt\">\r\n                       {parse(event.no_year_html)}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { eventsService } from '../services/eventsService';\r\nimport { EventPreview } from '../components/EventPreview';\r\n\r\nexport function Events({onToggle}) {\r\n\r\n    const [events, setEvents] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let isMount = true;\r\n        if (isMount) {\r\n            getEvents();\r\n        }\r\n        return () => {\r\n            isMount = false;\r\n        }\r\n    }, [])\r\n\r\n    const getEvents = async () => {\r\n        const dateObj = new Date();\r\n        const filterObj = {\r\n            day: dateObj.getUTCDate(),\r\n            month: dateObj.getUTCMonth() + 1\r\n        }\r\n        const data = await eventsService.query(filterObj);\r\n        setEvents(data.data);\r\n        console.log(data.data);\r\n    }\r\n\r\n    if (!events) return <div>Loading...</div>\r\n    const { Events, Births, Deaths } = events\r\n    return (\r\n        <div onClick={onToggle} className=\"container flex-col\">\r\n            <section id='event' className=\"type-container flex-col\">\r\n                <h2>EVENTS</h2>\r\n                <div className=\"cards-container\"> \r\n                    {\r\n                        Events.map((event, idx) => {\r\n                            return <EventPreview key={idx} event={event} eventType='event' />\r\n                        })\r\n                    }\r\n                </div>\r\n            </section>\r\n            <section id='birth' className=\"type-container flex-col\">\r\n                <h2>Births</h2>\r\n                <div className=\"cards-container\">\r\n                    {\r\n                        Births.map((event, idx) => {\r\n                            return <EventPreview key={idx} event={event} eventType='birth' />\r\n                        })\r\n                    }\r\n                </div>\r\n            </section>\r\n            <section id='death' className=\"type-container flex-col\">\r\n                <h2>Deaths</h2>\r\n                <div className=\"cards-container\">\r\n                    {\r\n                        Deaths.map((event, idx) => {\r\n                            return <EventPreview key={idx} event={event} eventType='death' />\r\n                        })\r\n                    }\r\n                </div>\r\n            </section>\r\n            <a className=\"backBtn\" href=\"#top\">Back To Top</a>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Events } from './pages/Events'\n\nexport default function App() {\nconst onToggle = ()=>{\n  document.body.classList.toggle('menu-open');\n}\n\n  return (\n    <div id=\"top\" className=\"app-wrapper flex-col\">\n      <nav className=\"myNavBar flex-evenly\">\n        <a href=\"#event\">Events</a>\n        <a href=\"#birth\">Birth</a>\n        <a href=\"#death\">Death</a>\n      </nav>\n      <span onClick={onToggle} class=\"mobile-menu\">â˜°</span>\n      <Events onToggle={onToggle} />\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./styles/global.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}